#!/usr/bin/env node
const url = require('url')
const http = require('http')
const debug = require('debug')('mitmdump')
const HttpProxy = require('http-proxy')
const Context = require('../lib/context.js')

const proxy = HttpProxy.createProxy()

const HTTP_PROXY = process.env.http_proxy || process.env.HTTP_PROXY
if (HTTP_PROXY) {
  debug(`using HTTP_PROXY: ${HTTP_PROXY}`)
  const HttpProxyAgent = require('http-proxy-agent')
  http.globalAgent = new HttpProxyAgent(HTTP_PROXY)
}

const server = http.createServer(async(client2proxy, proxy2client) => {

  try {
    const context = new Context(client2proxy, proxy2client)
    await context.execute()
  } catch (e) {
    console.error(e.stack);
  }

})

server.on('upgrade', (request, socket, head) => {
  const {path} = url.parse(request.url)
  //const [host, port] = request.headers.host.split(':')
  const target = `ws://${request.headers.host}${path}`
  debug(`upgrade: ${target}`)
  proxy.ws(request, socket, head, {target})
})


server.listen(process.env.PORT)
module.exports = server
